#!/usr/bin/env python
#
# Copyright 2015 Michael Rodler <contact@f0rki.at>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from mako.template import Template
from mako.lookup import TemplateLookup


HOOK_FILE_TEMPLATE = """/*
 * autogenerated LLTap tracer by tracergen.py
 *
 * header files: ${header_files}
 * date: ${date}
 *
 */

#include <liblltap.h>

% if includes:
/**** includes required by hooks ****/
    % for incl in includes:
#include <${incl}>
    % endfor
% endif

% if global_variables:
/**** global variables ****/
    % for gv in global_variables:
        % if gv:
${gv}
        % endif
    % endfor
% endif

/**** hook functions ****/

% for hook in hooks:
${hook.code}
% endfor

/**** hook registration ****/

LLTAP_HOOKSV ${module}_hooks[] = {
% for hook in hooks:
    { \"${hook.target}\", (LLTapHook) ${hook.name}, ${hook.type_in_C} }
% endfor
    LLTAP_HOOKSV_END,
    };
LLTAP_REGISTER_HOOKS(${module}_hooks)

"""

HOOK_TEMPLATE = """
${return_type} ${hook.name} ( ${hook_args} )
{
%if prepcode:
  ${prepcode}
% endif
  ${self.body()}
}
"""


PREHOOK_TEMPLATE = """
<%inherit file='hook'/>
  fprintf(stderr, "${function}(${fmtstr})"${args});
""".strip()

POSTHOOK_TEMPLATE = """
<%inherit file='hook'/>
  fprintf(stderr, " = {retfmt} ({rettype})\\n"{retval});
""".strip()


def gen_hook_file(data):
    t = Template(HOOK_FILE_TEMPLATE, strict_undefined=True)
    return t.render(**data)


def gen_hook_function_code(data, templates={}):
    lookup = TemplateLookup(strict_undefined=True)
    lookup.put_string("hook", HOOK_TEMPLATE)
    lookup.put_string("pre", PREHOOK_TEMPLATE)
    lookup.put_string("post", POSTHOOK_TEMPLATE)
    tm = lookup.get_template(data["hook"].type)
    return tm.render(**data)
